{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Boots up a Chef Server for Koala components. This cloudformation requires the Network Cloudformation to have been launched previously.",

  "Parameters" : {

    "VPCId" : {
      "Type" : "String",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)"
    },

    "PublicSubnetA": {
      "Type": "String",
      "Description": "Private Subnet A [Discovered Parameter]"
    },

    "BastionSecurityGroup": {
      "Type": "String",
      "Description": "Security Group of the Bastion Host [Discovered Parameter]"
    },

    "ChefBootstrapBucketName": {
      "Description" : "Name of the existing S3 Bucket where Chef Bootstrapping resources can be found.",
      "Type": "String",
      "Default" : "koala-chef"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the web server",
      "Type": "String",
      "Default" : "chef-server",
      "MinLength": "1",
      "MaxLength": "255",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "CookbookLocation": {
      "Type": "String",
      "Default" : "https://github.com/opscode-cookbooks/aws/tarball/master",
      "Description" : "Location of chef cookbooks to upload to server"
    }

  },

  "Mappings" : {

    "AWSRegion2AMI" : {
      "us-east-1" :      { "id" : "ami-83dee0ea" },
      "us-west-1" :      { "id" : "ami-c45f6281" },
      "us-west-2" :      { "id" : "ami-d0d8b8e0" },
      "eu-west-1" :      { "id" : "ami-aa56a1dd" },
      "sa-east-1"      : { "id" : "ami-d55bfbc8" },
      "ap-southeast-1" : { "id" : "ami-bc7325ee" },
      "ap-southeast-2" : { "id" : "ami-e577e9df" },
      "ap-northeast-1" : { "id" : "ami-f72e45f6" }
    }

  },

  "Resources" : {

    "ChefUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": { 
              "Statement": [
                {
                  "Effect":"Allow",
                  "Action": [
                    "cloudformation:DescribeStackResource",
                    "s3:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },

    "ChefUserKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "ChefUser"}
      }
    },

    "ChefIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "ChefServer" }
      }
    },

    "ChefServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
            "config" : {
                "packages" : {
                    "apt" : {
                      "s3cmd" : []
                    }
                },
                "sources" : {
                     "/home/ubuntu/chef-repo"           : "https://github.com/opscode/chef-repo/tarball/master",
                     "/home/ubuntu/chef-repo/cookbooks" : { "Ref" : "CookbookLocation" }
                },
                "files" : {
                    "/home/ubuntu/chef-repo/roles" : {
                      "source" : {"Fn::Join" : ["", [ 
                        "http://s3.amazonaws.com/", 
                        { "Ref" : "ChefBootstrapBucketName" }, 
                        "/example_chef_roles.tar.gz" 
                      ]]},
                      "mode"   : "000755",
                      "owner"  : "ubuntu",
                      "group"  : "ubuntu",
                      "authentication" : "S3AccessCreds"
                    },
                    "/home/ubuntu/setup_environment" : {
                      "source" : {"Fn::Join" : ["", [ 
                        "http://s3.amazonaws.com/", 
                        { "Ref" : "ChefBootstrapBucketName" }, 
                        "/setup-chef-server-with-knife" 
                      ]]},
                      "mode"   : "000755",
                      "owner"  : "ubuntu",
                      "group"  : "ubuntu",
                      "authentication" : "S3AccessCreds"
                    },
                    "/home/ubuntu/.s3cfg" : {
                      "content" : { "Fn::Join" : ["", [
                        "[default]\n",
                        "access_key = ", { "Ref" : "ChefUserKeys" }, "\n",
                        "secret_key = ", { "Fn::GetAtt": ["ChefUserKeys", "SecretAccessKey"] }, "\n",
                        "use_https = True\n"
                      ]]},
                      "mode"   : "000644",
                      "owner"  : "ubuntu",
                      "group"  : "ubuntu"
                    },
                    "/home/ubuntu/chef_11.10.0-1.ubuntu.12.04_amd64.deb" : {
                      "source" : "https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chef_11.10.0-1.ubuntu.12.04_amd64.deb",
                      "mode"   : "000664",
                      "owner"  : "ubuntu",
                      "group"  : "ubuntu"
                    },
                    "/home/ubuntu/chef-server_11.0.10-1.ubuntu.12.04_amd64.deb" : {
                      "source" : "https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chef-server_11.0.10-1.ubuntu.12.04_amd64.deb",
                      "mode"   : "000664",
                      "owner"  : "ubuntu",
                      "group"  : "ubuntu"
                    }
                }
            }
        },
        "AWS::CloudFormation::Authentication" : {
           "S3AccessCreds" : {
              "type" : "S3",
              "accessKeyId" : { "Ref" : "ChefUserKeys" },
              "secretKey" : { "Fn::GetAtt": [ "ChefUserKeys", "SecretAccessKey" ] }
           }
        }
      },
      "Properties": {
        "SubnetId" : { "Ref" : "PublicSubnetA" },
        "ImageId": { "Fn::FindInMap": [ "AWSRegion2AMI", { "Ref": "AWS::Region" }, "id" ] },
        "KeyName": { "Ref": "KeyName" },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroupIds" : [{ "Fn::GetAtt" : ["ChefSecurityGroup", "GroupId"] }],
        "Tags": [
          {
            "Key" : "Name",
            "Value" : "Chef Server"
          },
          {
            "Key" : "type",
            "Value" : "chef::server"
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",

            "function error_exit\n",
            "{\n",
            "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "ChefWaitHandle" }, "'\n",
            "  exit 1\n",
            "}\n",

            "apt-get -y install python-setuptools\n",
            "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
            "cfn-init --region ", { "Ref" : "AWS::Region" },
            "    -s ", { "Ref" : "AWS::StackId" }, " -r ChefServer ", "|| error_exit 'Failed to run cfn-init'\n",

            "# Bootstrap chef\n",
            "dpkg -i /home/ubuntu/chef_11.10.0-1.ubuntu.12.04_amd64.deb > /tmp/chef_install.log 2>&1 || error_exit 'Failed to install chef client tools'\n",
            "dpkg -i /home/ubuntu/chef-server_11.0.10-1.ubuntu.12.04_amd64.deb >> /tmp/chef_install.log 2>&1 || error_exit 'Failed to install chef server'\n",
            "sleep 5\n",
            "sudo /usr/bin/chef-server-ctl reconfigure > /tmp/chef_configure.log 2>&1 || error_exit 'Failed to configure chef server'\n",
            "sleep 5\n",
            "sudo chef-server-ctl start\n",

            "# Setup development environment in ubuntu user\n",
            "sudo -u ubuntu /home/ubuntu/setup_environment > /tmp/setup_environment.log 2>&1 || error_exit 'Failed to bootstrap chef server'\n",

            "# copy validation key to S3 bucket\n",
            "s3cmd -c /home/ubuntu/.s3cfg put /etc/chef-server/validation.pem s3://", {"Ref" : "ChefKeyBucket" } ,"/validation.pem > /tmp/put_validation_key.log 2>&1 || error_exit 'Failed to put Chef Server validation key'\n",

            "# If all went well, signal success\n",
            "cfn-signal -e $? -r 'Chef Server configuration' '", { "Ref" : "ChefWaitHandle" }, "'\n"
        ]]}}
      }
    },

    "ChefSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Open up SSH access plus Chef Server required ports",
        "VpcId" : { "Ref" : "VPCId" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "BastionSecurityGroup" } },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "SourceSecurityGroupId": { "Fn::GetAtt" : ["ChefClientSecurityGroup", "GroupId"] }},
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0"}
        ]
      }
    },

    "ChefClientSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPCId" },
        "GroupDescription" : "Security Group for Chef clients with access to Chef Server"
      }
    },

    "ChefKeyBucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "AccessControl" : "Private"
      }
    },

    "ChefKeyBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version" : "2008-10-17",
          "Id" : "WritePolicy",
          "Statement" : [
            {
              "Sid" : "WriteAccess",
              "Action" : ["s3:PutObject"],
              "Effect" : "Allow",
              "Resource" : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "ChefKeyBucket"} , "/*"]]},
              "Principal" : { "AWS": {"Fn::GetAtt" : ["ChefUser", "Arn"]} }
            }
          ]
        },
        "Bucket" : {"Ref" : "ChefKeyBucket"}
      }
    },

    "ChefWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "ChefWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ChefServer",
      "Properties" : {
        "Handle"  : { "Ref" : "ChefWaitHandle" },
        "Timeout" : "1200"
      }
    }

  },

  "Outputs" : {
    "ChefURL" : {
      "Description" : "URL of newly created Opscode Chef Server",
      "Value" : { "Fn::Join" : ["", ["https://", {"Fn::GetAtt" : [ "ChefServer", "PublicDnsName" ]}, ":443"]]}
    },
    "ChefClientSecurityGroup" : {
      "Description" : "EC2 Security Group with access to Opscode chef server",
      "Value" : { "Ref" :"ChefClientSecurityGroup" }
    },
    "ChefKeyBucket" : {
      "Description" : "Location of validation key",
      "Value" : {"Ref" : "ChefKeyBucket" }
    }
  }
}